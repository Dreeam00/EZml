const templates = {}; function parseEZ(s) { s = s.replace(/\(var\s+(@\w+(?:\s+@\w+)*)\s+\[name="(\w+)"\]\s*\{<([\s\S]*?)>\}\)/g, (_, vs, name, body) => (templates[name] = {vs:vs.split(/\s+/),body}) && ""); s = s.replace(/\((\w+)\s*\{([^}]*)\}\)/g, (_, name, args) => { const t = templates[name]; if (!t) return ""; const a = args.split(",").map(x=>x.trim().replace(/^["']|["']$/g,"")); let filled = t.body.replace(/\{([^}]+)\}/g, (_, c) => c.split(",").map(v => { v = v.trim(); if (v.startsWith("@")) { const i = t.vs.indexOf(v); return i >= 0 ? a[i] : ""; } return v; }).join("")); return parseEZ(filled); }); s = s.replace(/\((\w+)\s*\[([^\]]*)\]\s*\{<([\s\S]*?)>\}\s*(\*\d+)?\)/g, (_, tag, attr, inner, rep) => { const r = rep ? +rep.slice(1) : 1; const content = parseEZ(inner); return (`<${tag}${attr.trim() ? ' ' + attr.trim() : ''}>${content}</${tag}>`).repeat(r); }); s = s.replace(/\((\w+)\s*\[([^\]]*)\]\s*\{([^}]*)\}\s*(\*\d+)?\)/g, (_, tag, attr, cont, rep) => { const r = rep ? +rep.slice(1) : 1; const items = cont.split(",").map(c=>`<${tag}${attr?" "+attr:""}>${c.replace(/^["']|["']$/g,"")}</${tag}>`); return items.join("").repeat(r); }); s = s.replace(/\((\w+)\s*\[([^\]]*)\]\s*([^\(\)\{\}<>]+)\)/g, (_, tag, attr, cont) => `<${tag}${attr.trim() ? ' ' + attr.trim() : ''}>${cont.trim()}</${tag}>`); s = s.replace(/\((\w+)\s*\[([^\]]*)\]\)/g, (_, tag, attr) => `<${tag}${attr.trim() ? ' ' + attr.trim() : ''}>`); s = s.replace(/\((\w+)\)/g, (_, tag) => `<${tag}>`); return s; } document.querySelectorAll('script[type="text/EZml"]').forEach(s=>{ const d=document.createElement('div'); d.innerHTML=parseEZ(s.textContent); s.replaceWith(d); });
